{
  "name": "crypto-scanner-gui",
  "version": "1.0.0",
  "description": "",
  "main": "dist/main/main.js",
  "scripts": {
    "build-renderer": "webpack --mode=production",
    "build-main": "tsc --project tsconfig.main.json",
    "build-preload": "tsc --project tsconfig.preload.json",
    "build": "npm run build-renderer && npm run build-main && npm run build-preload",
    "dev-renderer": "webpack serve --mode=development",
    "dev-main": "electron dist/main/main.js",
    "dev": "npm run build && npm run dev-main",
    "start": "npm run dev",
    "pack": "npm run build && electron-builder --dir",
    "dist": "npm run build && electron-builder",
    "dist:linux": "npm run build && npm run dist:linux-amd && npm run dist:linux-arm",
    "dist:linux-amd": "npm run copy-backend && electron-builder --linux --x64 --dir && mv ../linux-unpacked ../linux-amd",
    "dist:linux-arm": "npm run copy-backend && electron-builder --linux --arm64 --dir && mv ../linux-arm64-unpacked ../linux-arm",
    "dist:win": "npm run build && npm run dist:win-amd && npm run dist:win-arm",
    "dist:win-amd": "npm run copy-backend && electron-builder --win --x64 --dir && move ..\\win-unpacked ..\\win-amd",
    "dist:win-arm": "npm run copy-backend && electron-builder --win --arm64 --dir && move ..\\win-arm64-unpacked ..\\win-arm",
    "copy-backend": "node -e \"const fs = require('fs'); const path = require('path'); const os = require('os'); try { fs.mkdirSync(path.join(__dirname, 'dist', 'main'), {recursive: true}); console.log('Created dist/main directory'); const platform = os.platform(); let srcFile, destFile; if (platform === 'win32') { srcFile = '../CryptoScanner/release/CryptoScannerCLI.exe'; destFile = 'CryptoScanner.exe'; } else if (platform === 'darwin') { srcFile = '../CryptoScanner/CryptoScannerCLI'; destFile = 'CryptoScannerCLI'; } else { srcFile = '../CryptoScanner/CryptoScanner'; destFile = 'CryptoScanner'; } const srcPath = path.join(__dirname, srcFile); const destPath = path.join(__dirname, 'dist', 'main', destFile); if (fs.existsSync(srcPath)) { fs.copyFileSync(srcPath, destPath); console.log('Copied backend executable:', srcFile, '->', destFile); } else { console.log('Backend executable not found at:', srcPath); } if (platform === 'win32') { const dllPaths = { 'Qt5Core.dll': 'C:/Qt/5.15.2/mingw81_64/bin/Qt5Core.dll', 'libwinpthread-1.dll': 'C:/Program Files/Git/mingw64/bin/libwinpthread-1.dll', 'libstdc++-6.dll': 'C:/Program Files/Git/mingw64/bin/libstdc++-6.dll', 'libgcc_s_seh-1.dll': 'C:/Program Files/Git/mingw64/bin/libgcc_s_seh-1.dll', 'libcrypto-1_1-x64.dll': 'C:/Qt/Tools/mingw1310_64/opt/bin/libcrypto-1_1-x64.dll', 'libssl-1_1-x64.dll': 'C:/Qt/Tools/mingw1310_64/opt/bin/libssl-1_1-x64.dll' }; let copiedCount = 0; for (const [dllName, srcDll] of Object.entries(dllPaths)) { const destDll = path.join(__dirname, 'dist', 'main', dllName); if (fs.existsSync(srcDll)) { fs.copyFileSync(srcDll, destDll); console.log('Copied DLL:', dllName, 'from', srcDll); copiedCount++; } else { console.log('Warning: DLL not found:', srcDll); } } console.log('Successfully copied', copiedCount, 'DLLs'); } const patternsPath = path.join(__dirname, '../CryptoScanner/patterns.json'); const destPatternsPath = path.join(__dirname, 'dist', 'main', 'patterns.json'); if (fs.existsSync(patternsPath)) { fs.copyFileSync(patternsPath, destPatternsPath); console.log('Copied patterns.json'); } else { console.log('Warning: patterns.json not found at:', patternsPath); } } catch(e) { console.log('Error in copy-backend:', e.message); }\"",
    "rebuild": "npm run pack",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.13",
    "@types/node": "^24.5.2",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "autoprefixer": "^10.4.21",
    "css-loader": "^7.1.2",
    "electron": "^38.1.2",
    "electron-builder": "^26.0.12",
    "file-loader": "^6.2.0",
    "html-webpack-plugin": "^5.6.4",
    "postcss": "^8.5.6",
    "postcss-loader": "^8.2.0",
    "style-loader": "^4.0.0",
    "tailwindcss": "^4.1.13",
    "ts-loader": "^9.5.4",
    "typescript": "^5.9.2",
    "webpack": "^5.101.3",
    "webpack-cli": "^6.0.1",
    "webpack-dev-server": "^5.2.2"
  },
  "build": {
    "appId": "com.cryptoscanner.app",
    "productName": "CryptoScanner",
    "directories": {
      "output": "../"
    },
    "files": [
      "dist/**/*",
      "src/renderer/assets/**/*"
    ],
    "asarUnpack": [
      "dist/main/CryptoScanner",
      "dist/main/CryptoScannerCLI",
      "dist/main/CryptoScanner.exe",
      "dist/main/patterns.json",
      "dist/main/*.dll"
    ],
    "mac": {
      "icon": "src/renderer/assets/icon.icns",
      "category": "public.app-category.developer-tools",
      "identity": null
    },
    "win": {
      "icon": "src/renderer/assets/icon.ico",
      "target": [
        {
          "target": "dir",
          "arch": ["x64", "arm64"]
        },
        {
          "target": "nsis",
          "arch": ["x64", "arm64"]
        }
      ]
    },
    "linux": {
      "icon": "src/renderer/assets/icon.png",
      "category": "Utility",
      "target": [
        {
          "target": "dir",
          "arch": ["x64", "arm64"]
        },
        {
          "target": "AppImage",
          "arch": ["x64", "arm64"]
        },
        {
          "target": "deb",
          "arch": ["x64", "arm64"]
        },
        {
          "target": "tar.gz",
          "arch": ["x64", "arm64"]
        }
      ]
    }
  }
}
