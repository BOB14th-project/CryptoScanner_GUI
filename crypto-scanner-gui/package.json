{
  "name": "crypto-scanner-gui",
  "version": "1.0.0",
  "description": "",
  "main": "dist/main/main.js",
  "scripts": {
    "build-renderer": "webpack --mode=production",
    "build-main": "tsc --project tsconfig.main.json && npm run build-backend",
    "build-backend": "node -e \"const os = require('os'); const { execSync } = require('child_process'); if (os.platform() === 'win32') { console.log('Building C++ backend for Windows...'); execSync('cd ..\\\\CryptoScanner && build_cli_only.bat && copy CryptoScannerCLI.exe ..\\\\crypto-scanner-gui\\\\dist\\\\main\\\\CryptoScanner.exe && copy patterns.json ..\\\\crypto-scanner-gui\\\\dist\\\\main\\\\patterns.json', {stdio: 'inherit'}); } else { execSync('cd ../CryptoScanner && ./build_cli_only.sh && cp CryptoScannerCLI ../crypto-scanner-gui/dist/main/CryptoScanner && cp patterns.json ../crypto-scanner-gui/dist/main/patterns.json && chmod +x ../crypto-scanner-gui/dist/main/CryptoScanner', {stdio: 'inherit'}); }\"",
    "build-preload": "tsc --project tsconfig.preload.json",
    "build": "npm run build-renderer && npm run build-main && npm run build-preload",
    "dev-renderer": "webpack serve --mode=development",
    "dev-main": "electron dist/main/main.js",
    "dev": "npm run build && npm run dev-main",
    "start": "npm run dev",
    "pack": "npm run build && electron-builder --dir",
    "dist": "npm run build && electron-builder",
    "dist:linux": "npm run build && npm run dist:linux-amd && npm run dist:linux-arm",
    "dist:linux-amd": "electron-builder --linux --x64 --dir && mv ../linux-unpacked ../linux-amd",
    "dist:linux-arm": "electron-builder --linux --arm64 --dir && mv ../linux-arm64-unpacked ../linux-arm",
    "dist:win": "npm run build && npm run dist:win-amd && npm run dist:win-arm",
    "dist:win-amd": "npm run copy-backend && electron-builder --win --x64 --dir && move ..\\win-unpacked ..\\win-amd",
    "dist:win-arm": "npm run copy-backend && electron-builder --win --arm64 --dir && move ..\\win-arm64-unpacked ..\\win-arm",
    "copy-backend": "node -e \"const fs = require('fs'); const path = require('path'); try { fs.mkdirSync(path.join(__dirname, 'dist', 'main'), {recursive: true}); console.log('Created dist/main directory'); } catch(e) { console.log('dist/main already exists'); }\"",
    "rebuild": "npm run pack",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.13",
    "@types/node": "^24.5.2",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "autoprefixer": "^10.4.21",
    "css-loader": "^7.1.2",
    "electron": "^38.1.2",
    "electron-builder": "^26.0.12",
    "file-loader": "^6.2.0",
    "html-webpack-plugin": "^5.6.4",
    "postcss": "^8.5.6",
    "postcss-loader": "^8.2.0",
    "style-loader": "^4.0.0",
    "tailwindcss": "^4.1.13",
    "ts-loader": "^9.5.4",
    "typescript": "^5.9.2",
    "webpack": "^5.101.3",
    "webpack-cli": "^6.0.1",
    "webpack-dev-server": "^5.2.2"
  },
  "build": {
    "appId": "com.cryptoscanner.app",
    "productName": "CryptoScanner",
    "directories": {
      "output": "../"
    },
    "files": [
      "dist/**/*",
      "src/renderer/assets/**/*"
    ],
    "asarUnpack": [
      "dist/main/CryptoScanner",
      "dist/main/patterns.json"
    ],
    "mac": {
      "icon": "src/renderer/assets/icon.icns",
      "category": "public.app-category.developer-tools",
      "identity": null
    },
    "win": {
      "icon": "src/renderer/assets/icon.ico",
      "target": [
        {
          "target": "dir",
          "arch": ["x64", "arm64"]
        },
        {
          "target": "nsis",
          "arch": ["x64", "arm64"]
        }
      ]
    },
    "linux": {
      "icon": "src/renderer/assets/icon.png",
      "category": "Utility",
      "target": [
        {
          "target": "dir",
          "arch": ["x64", "arm64"]
        },
        {
          "target": "AppImage",
          "arch": ["x64", "arm64"]
        },
        {
          "target": "deb",
          "arch": ["x64", "arm64"]
        },
        {
          "target": "tar.gz",
          "arch": ["x64", "arm64"]
        }
      ]
    }
  }
}
